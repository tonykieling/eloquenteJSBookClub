The general goal is:
a- Create the project.
b- Break down the recipe app into components that live in different files.
c- Set up a webpack build that incorporates Babel.

***** Step-by-step
1- create the initial directory sctructure
# mkdir my-app && cd my-app
# mkdir <other directories> *** there is no one way to do it, it is a matter of organize the code in a good way

2- create npm project - in the root dir
# npm init -y
  it is gonna create a package.json and package-lock.json files, which contains the project's configuration.

3- install react and react-dom
# npm i react react-dom

4- write React components and the app

5- install webpack
*** it is gonna work in dev env
it is needed for bundle, minify and act as a server
 when building the bundler, it needs to be set in a prod server
# npm install --save-dev webpack webpack-dev-server webpack-cli

5.1- create a file webpack.config.js (in the root level):
module.exports = {
  entry: './src/index.js',
  output: {
    path: __dirname + '/dist',
    publicPath: '/',
    filename: 'bundle.js'
  },
  module: {
    rules: [
    {
      test: /\.(js|jsx)$/,
      exclude: /node_modules/,
      use: ['babel-loader']
    }
    ]
  },
  devtool: "source-map" // this line will create a bundler for the source code, which helps in debuging tasks - do not need it in prod
};

6- install babel
it is needed for transpiling ES6 syntax
# npm install --save-dev @babel/core @babel/preset-env \@babel/preset-react babel-loader

6.1- create a file .babelrc (in the root):
{
  "presets": [
    "@babel/preset-env",
    "@babel/preset-react"
  ]
}

7- set the index.html file to load the bundler
I.e. <script src="./dist/bundle.js"></script>
in the server, index.html will point for that location (./dist, file bundle.js, shich is exported by webpack in the build stage)

8- if running using webpack server:
- add a line in package.json, scripts:
  "start": "webpack serve --mode development",
- # npm run start

OR
8- copy index and /dist to a public directory in a node server (for instance) 
*** in part-2/server there is a node server up and running
*** for that, add a line in package.json:
  "build": "webpack --mode production",
run # npm run build
copy the files to the server public directory


