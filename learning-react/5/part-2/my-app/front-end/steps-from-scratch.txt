***** Step-by-step

# PHASE 1 - FRONT-END
The first phase considers only front-end development
1- create the initial directory sctructure
# mkdir my-app && cd my-app
*** there is no one way to do it, it is a matter of organize the code in a good way
# mkdir front-end => it will be the directory for front-end code
# cd front-end
# mkdir src
# mkdir src/components
# mkdir public

2- create npm project - in the root dir
# npm init -y
  it is gonna create a package.json and package-lock.json files, which contains the project's configuration.

3- install react and react-dom
# npm i react react-dom

4- install webpack
*** it is gonna work in dev env
it is needed for bundle, minify and act as a server
 when building the bundler, it needs to be set in a prod server
# npm install --save-dev webpack webpack-dev-server webpack-cli

4.1- create a file webpack.config.js (in the root level):
module.exports = {
  entry: "./src/index.js",
  output: {
    path: __dirname + "/public",
    filename: "bundle.js"
  },
  module: {
    rules: [
    {
      test: /\.(js|jsx)$/,
      exclude: /node_modules/,
      use: ["babel-loader"]
    }
    ]
  },
  devtool: "source-map" // this line will create a bundler for the source code, which helps in debuging tasks - do not need it in prod
};

5- install babel
it is needed for transpiling ES6 syntax
# npm install --save-dev @babel/core @babel/preset-env \@babel/preset-react babel-loader

5.1- create a file .babelrc (in the root):
{
  "presets": [
    "@babel/preset-env",
    "@babel/preset-react"
  ]
}

6- write React components and the app

7- create index.html file into public

8- set the index.html file to load the bundler
I.e. <script src="./dist/bundle.js"></script>
in the server, index.html will point for that location (./public, file bundle.js, shich is exported by webpack in the build stage)

9- in order to check if the code is working and test the settings
- add 2 lines in package.json, scripts:
    "start": "webpack serve --mode development",
    "build": "webpack --mode production",
- run the 2 commands:
- # npm run build => it will create the bundle file
- # npm run start => it will start the server
- check in the browser
*** I am not sure if it is necessary proceed with all the steps
*** as aboce, each time change the code, it needs to generate a new bundle file manually, at least the server is Hot Module Replacement

Summarizing:
1- install and set webpack and babel
2- set index.html to load the bundle file
3- run webpack server

# PHASE 2 - BACKEND AND INTEGRATION



OR
8- copy index and /dist to a public directory in a node server (for instance) 
*** in part-2/server there is a node server up and running
*** for that, add a line in package.json:
  "build": "webpack --mode production",
run # npm run build
copy the files to the server public directory


